{"ast":null,"code":"var _jsxFileName = \"/Users/jamellivansamuels/weather-app/src/Components/searchBar.js\",\n    _s = $RefreshSig$();\n\nimport { getSuggestedQuery, render } from '@testing-library/react';\nimport React, { useState } from 'react';\nimport { createRenderer, renderIntoDocument } from 'react-dom/test-utils';\nimport api_key from '../apiKeys';\nimport Clock from \"react-live-clock\";\nimport Forecast from './Forecast';\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport loader from \"../Images/WeatherIcons.gif\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchBar() {\n  _s();\n\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api_key.base}${city}&appid=${api_key.key}`).then(res => res.json()).then(result => {\n        setWeather(result);\n        setCity('');\n        console.log(result);\n      });\n    }\n  };\n\n  const dateBuilder = d => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"Novemebr\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true\n  };\n\n  class Weather extends React.Component {\n    constructor(...args) {\n      super(...args);\n      this.stats = {\n        lat: undefined,\n        lon: undefined,\n        errorMessage: undefined,\n        temperatureC: undefined,\n        temperatureF: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        icon: \"CLEAR_DAY\",\n        sunrise: \"undefined\",\n        sunset: \"undefined\",\n        errorMsg: \"undefined\"\n      };\n    }\n\n    render() {\n      if (this.state.temperatureC) {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"city\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"title\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: this.state.city\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: this.state.country\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-icon\",\n              children: [\" \", /*#__PURE__*/_jsxDEV(ReactAnimatedWeather, {\n                icon: this.state.icon,\n                color: defaults.color,\n                size: defaults.size,\n                animate: defaults.animate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: this.state.main\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"date-time\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dmy\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  id: \"txt\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"current-time\",\n                  children: /*#__PURE__*/_jsxDEV(Clock, {\n                    format: \"HH:mm:ss\",\n                    interval: 1000,\n                    ticking: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 17\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"current-date\",\n                  children: dateBuilder(new Date())\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"temperature\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [this.state.temperatureC, \"\\xB0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"C\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 43\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Forcast, {\n            icon: this.state.icon,\n            weather: this.state.main\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: loader,\n            style: {\n              width: \"50%\",\n              WebkitUserDrag: \"none\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: \"white\",\n              fontSize: \"22px\",\n              fontWeight: \"600\"\n            },\n            children: \"Detecting your location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              color: \"white\",\n              marginTop: \"10px\"\n            },\n            children: [\"Your current location wil be displayed on the App \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 61\n            }, this), \" & used for calculating Real time weather.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 7\n        }, this);\n      }\n    }\n\n  }\n}\n\n_s(SearchBar, \"8xhIkAHhqAUl+XfNTxNkLw546xY=\");\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/jamellivansamuels/weather-app/src/Components/searchBar.js"],"names":["getSuggestedQuery","render","React","useState","createRenderer","renderIntoDocument","api_key","Clock","Forecast","ReactAnimatedWeather","loader","SearchBar","city","setCity","weather","setWeather","search","evt","key","fetch","base","then","res","json","result","console","log","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","Component","stats","lat","undefined","lon","errorMessage","temperatureC","temperatureF","country","humidity","description","icon","sunrise","sunset","errorMsg","state","main","Date","width","WebkitUserDrag","fontSize","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import { getSuggestedQuery, render } from '@testing-library/react';\nimport React, { useState } from 'react';\nimport { createRenderer, renderIntoDocument } from 'react-dom/test-utils';\nimport api_key from '../apiKeys';\nimport Clock from \"react-live-clock\";\nimport Forecast from './Forecast';\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport loader from \"../Images/WeatherIcons.gif\"\n\nfunction SearchBar() {\n    const [city, setCity] = useState('');\n    const [weather, setWeather] = useState({});\n\n\n\n\n    const search = evt => {\n      if (evt.key === \"Enter\") {\n        fetch(`${api_key.base}${city}&appid=${api_key.key}`)\n        .then(res => res.json())\n        .then(result =>{\n          setWeather(result);\n          setCity('');\n          console.log(result);\n        });\n      }\n    }\n    \n    const dateBuilder = (d) => {\n        let months = [\n          \"January\",\n          \"February\",\n          \"March\",\n          \"April\",\n          \"May\",\n          \"June\",\n          \"July\",\n          \"August\",\n          \"September\",\n          \"Novemebr\",\n          \"December\",\n        ];\n\n        let days =[\n          \"Sunday\",\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\"\n        ];\n\n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n\n        return `${day} ${date} ${month} ${year}`;\n    };\n\n    const defaults = {\n      color: \"white\",\n      size: 112,\n      animate: true,\n\n    };\n\nclass Weather extends React.Component {\n  stats = {\n    lat: undefined, \n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined, \n    temperatureF: undefined, \n    city: undefined,\n    country: undefined, \n    humidity: undefined, \n    description: undefined, \n    icon: \"CLEAR_DAY\",\n    sunrise: \"undefined\",\n    sunset: \"undefined\",\n    errorMsg: \"undefined\",\n  }\n\n\n\n\n      \nrender() {\n  if (this.state.temperatureC) {\n    return (\n      <React.Fragment>\n        <div className=\"city\">\n          <div className=\"title\">\n            <h2>{this.state.city}</h2>\n            <h3>{this.state.country}</h3>\n          </div>\n          <div className=\"mb-icon\">\n            {\" \"}\n            <ReactAnimatedWeather\n              icon={this.state.icon}\n              color={defaults.color}\n              size={defaults.size}\n              animate={defaults.animate}\n            />\n            <p>{this.state.main}</p>\n          </div>\n          <div className=\"date-time\">\n            <div className=\"dmy\">\n              <div id=\"txt\"></div>\n              <div className=\"current-time\">\n                <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n              </div>\n              <div className=\"current-date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"temperature\">\n              <p>\n                {this.state.temperatureC}°<span>C</span>\n              </p>\n              {/* <span className=\"slash\">/</span>\n              {this.state.temperatureF} &deg;F */}\n            </div>\n          </div>\n        </div>\n        <Forcast icon={this.state.icon} weather={this.state.main} />\n      </React.Fragment>\n    );\n  } else {\n    return (\n      <React.Fragment>\n        <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n        <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n          Detecting your location\n        </h3>\n        <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n          Your current location wil be displayed on the App <br></br> & used\n          for calculating Real time weather.\n        </h3>\n      </React.Fragment>\n      );\n    }\n  }\n}\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}