{"ast":null,"code":"var _jsxFileName = \"/Users/jamellivansamuels/weather-app/src/Components/currentLocation.js\";\nimport React from \"react\";\nimport apiKeys from \"../apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./Forescast\";\nimport loader from \"../Images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true\n};\n\nclass Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      errorMessage: undefined,\n      temperatureC: undefined,\n      temperatureF: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      icon: \"CLEAR_DAY\",\n      sunrise: undefined,\n      sunset: undefined,\n      errorMsg: undefined\n    };\n\n    this.getPosition = options => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n    };\n\n    this.getWeather = async (lat, lon) => {\n      const api_call = await fetch(`${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`);\n      const data = await api_call.json();\n      this.setState({\n        lat: lat,\n        lon: lon,\n        city: data.name,\n        temperatureC: Math.round(data.main.temp),\n        temperatureF: Math.round(data.main.temp * 1.8 + 32),\n        humidity: data.main.humidity,\n        main: data.weather[0].main,\n        country: data.sys.country // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n        // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n\n      });\n\n      switch (this.state.main) {\n        case \"Haze\":\n          this.setState({\n            icon: \"CLEAR_DAY\"\n          });\n          break;\n\n        case \"Clouds\":\n          this.setState({\n            icon: \"CLOUDY\"\n          });\n          break;\n\n        case \"Rain\":\n          this.setState({\n            icon: \"RAIN\"\n          });\n          break;\n\n        case \"Snow\":\n          this.setState({\n            icon: \"SNOW\"\n          });\n          break;\n\n        case \"Dust\":\n          this.setState({\n            icon: \"WIND\"\n          });\n          break;\n\n        case \"Drizzle\":\n          this.setState({\n            icon: \"SLEET\"\n          });\n          break;\n\n        case \"Fog\":\n          this.setState({\n            icon: \"FOG\"\n          });\n          break;\n\n        case \"Smoke\":\n          this.setState({\n            icon: \"FOG\"\n          });\n          break;\n\n        case \"Tornado\":\n          this.setState({\n            icon: \"WIND\"\n          });\n          break;\n\n        default:\n          this.setState({\n            icon: \"CLEAR_DAY\"\n          });\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition() //If user allow location service then will fetch data & send it to get-weather function.\n      .then(position => {\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      }).catch(err => {\n        //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n        this.getWeather(28.67, 77.22);\n        alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");\n      });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(() => this.getWeather(this.state.lat, this.state.lon), 600000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  } // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n\n  render() {\n    if (this.state.temperatureC) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"city\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: this.state.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: this.state.country\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-icon\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(ReactAnimatedWeather, {\n              icon: this.state.icon,\n              color: defaults.color,\n              size: defaults.size,\n              animate: defaults.animate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.main\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date-time\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dmy\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"txt\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"current-time\",\n                children: /*#__PURE__*/_jsxDEV(Clock, {\n                  format: \"HH:mm:ss\",\n                  interval: 1000,\n                  ticking: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"current-date\",\n                children: dateBuilder(new Date())\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"temperature\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [this.state.temperatureC, \"\\xB0\", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"C\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Forcast, {\n          icon: this.state.icon,\n          weather: this.state.main\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: loader,\n          style: {\n            width: \"50%\",\n            WebkitUserDrag: \"none\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"white\",\n            fontSize: \"22px\",\n            fontWeight: \"600\"\n          },\n          children: \"Detecting your location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"white\",\n            marginTop: \"10px\"\n          },\n          children: [\"Your current location wil be displayed on the App \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 63\n          }, this), \" & used for calculating Real time weather.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["/Users/jamellivansamuels/weather-app/src/Components/currentLocation.js"],"names":["React","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","Component","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","city","country","humidity","description","icon","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","api_call","fetch","base","key","data","json","setState","name","Math","round","main","temp","weather","sys","componentDidMount","then","position","coords","latitude","longitude","catch","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Date","width","WebkitUserDrag","fontSize","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport apiKeys from \"../apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./Forescast\";\nimport loader from \"../Images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  // tick = () => {\n  //   this.getPosition()\n  //   .then((position) => {\n  //     this.getWeather(position.coords.latitude, position.coords.longitude)\n  //   })\n  //   .catch((err) => {\n  //     this.setState({ errorMessage: err.message });\n  //   });\n  // }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°<span>C</span>\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;"]},"metadata":{},"sourceType":"module"}